// <auto-generated />
using System;
using DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EntityLayer.Concrete.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1992, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "05e88500-0b29-40e8-8ad4-4964dbf54afe",
                            Email = "suleymanibrahimbas@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "SÜLEYMAN",
                            LastName = "İBRAHİMBAŞ",
                            LockoutEnabled = true,
                            NormalizedEmail = "SULEYMANIBRAHIMBAS@GMAIL.COM",
                            NormalizedUserName = "2010010217002",
                            PasswordHash = "AQAAAAEAACcQAAAAEICR8I/p9jvLtA+XrvIYBsag0sQGPXYeYV3WJ0gbUBUzeN9UKKRT5e5O1tVBkX8K5w==",
                            PhoneNumber = "5362361674",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "LVF4BKR5P3ZZZGEK5GENLFKCUB3ITSPI",
                            TwoFactorEnabled = false,
                            UserName = "2010010217002"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = "CAL183",
                            CourseName = "Mathematics I"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = "CHE183",
                            CourseName = "General Chemistry"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = "CME111",
                            CourseName = "Programming Languages I"
                        },
                        new
                        {
                            Id = 4,
                            CourseId = "CME113",
                            CourseName = "Introduction to Computer Engineering"
                        },
                        new
                        {
                            Id = 5,
                            CourseId = "FOL181",
                            CourseName = "Foreign Language I"
                        },
                        new
                        {
                            Id = 6,
                            CourseId = "HST181",
                            CourseName = "Atatürk's Principles and History of Revolutions I"
                        },
                        new
                        {
                            Id = 7,
                            CourseId = "PHY183",
                            CourseName = "General Physics I"
                        },
                        new
                        {
                            Id = 8,
                            CourseId = "CAL186",
                            CourseName = "Mathematics II"
                        },
                        new
                        {
                            Id = 9,
                            CourseId = "CAL188",
                            CourseName = "Linear Algebra"
                        },
                        new
                        {
                            Id = 10,
                            CourseId = "CME112",
                            CourseName = "Programming Languages II"
                        },
                        new
                        {
                            Id = 11,
                            CourseId = "CME114",
                            CourseName = "Probability and Statistics"
                        },
                        new
                        {
                            Id = 12,
                            CourseId = "FOL182",
                            CourseName = "Foreign Language II"
                        },
                        new
                        {
                            Id = 13,
                            CourseId = "HST182",
                            CourseName = "Atatürk's Principles and History of Revolutions II"
                        },
                        new
                        {
                            Id = 14,
                            CourseId = "PHY186",
                            CourseName = "General Physics II"
                        },
                        new
                        {
                            Id = 15,
                            CourseId = "TRK182",
                            CourseName = "Turkish Language II"
                        },
                        new
                        {
                            Id = 16,
                            CourseId = "CAL283",
                            CourseName = "Differantial Equations"
                        },
                        new
                        {
                            Id = 17,
                            CourseId = "CME221",
                            CourseName = "Logic Circuits"
                        },
                        new
                        {
                            Id = 18,
                            CourseId = "CME223",
                            CourseName = "Circuit Analysis"
                        },
                        new
                        {
                            Id = 19,
                            CourseId = "CME225",
                            CourseName = "Object Oriented Programming"
                        },
                        new
                        {
                            Id = 20,
                            CourseId = "CME227",
                            CourseName = "Data Structures"
                        },
                        new
                        {
                            Id = 21,
                            CourseId = "FOL281",
                            CourseName = "Technical Foreign Language I"
                        },
                        new
                        {
                            Id = 22,
                            CourseId = "CME224",
                            CourseName = "Electronics"
                        },
                        new
                        {
                            Id = 23,
                            CourseId = "CME228",
                            CourseName = "Internet Based Programming"
                        },
                        new
                        {
                            Id = 24,
                            CourseId = "CME222",
                            CourseName = "Algorithms"
                        },
                        new
                        {
                            Id = 25,
                            CourseId = "CME226",
                            CourseName = "Database Management"
                        },
                        new
                        {
                            Id = 26,
                            CourseId = "CME323",
                            CourseName = "Numerical Analysis"
                        },
                        new
                        {
                            Id = 27,
                            CourseId = "CME325",
                            CourseName = "Data Communıcation Systems"
                        },
                        new
                        {
                            Id = 28,
                            CourseId = "CME327",
                            CourseName = "Signals and Systems"
                        },
                        new
                        {
                            Id = 29,
                            CourseId = "CME399",
                            CourseName = "Industrial Practice I"
                        },
                        new
                        {
                            Id = 30,
                            CourseId = "FOL381",
                            CourseName = "Reading and Speaking at Foreign Language"
                        },
                        new
                        {
                            Id = 31,
                            CourseId = "SOC381",
                            CourseName = "Values Education"
                        },
                        new
                        {
                            Id = 32,
                            CourseId = "CME322",
                            CourseName = "Automata Theory"
                        },
                        new
                        {
                            Id = 33,
                            CourseId = "CME324",
                            CourseName = "Operating Systems"
                        },
                        new
                        {
                            Id = 34,
                            CourseId = "CME326",
                            CourseName = "Computer Network"
                        },
                        new
                        {
                            Id = 35,
                            CourseId = "ESC302",
                            CourseName = "Research and Presentation Skills"
                        },
                        new
                        {
                            Id = 36,
                            CourseId = "FOL282",
                            CourseName = "Technical Foreign Language II"
                        },
                        new
                        {
                            Id = 37,
                            CourseId = "FOL382",
                            CourseName = "Foreign Language for Business"
                        },
                        new
                        {
                            Id = 38,
                            CourseId = "CME321",
                            CourseName = "Microprocessors"
                        },
                        new
                        {
                            Id = 39,
                            CourseId = "CME421",
                            CourseName = "Senior Project I"
                        },
                        new
                        {
                            Id = 40,
                            CourseId = "CME425",
                            CourseName = "Introduction to Data Mining"
                        },
                        new
                        {
                            Id = 41,
                            CourseId = "CME427",
                            CourseName = "Programming of Mobile Devices"
                        },
                        new
                        {
                            Id = 42,
                            CourseId = "CME429",
                            CourseName = "Introduction to Image Processing"
                        },
                        new
                        {
                            Id = 43,
                            CourseId = "CME435",
                            CourseName = "Web Services"
                        },
                        new
                        {
                            Id = 44,
                            CourseId = "CME499",
                            CourseName = "Industrial Practice II"
                        },
                        new
                        {
                            Id = 45,
                            CourseId = "ESC461",
                            CourseName = "Introduction to Economy"
                        },
                        new
                        {
                            Id = 46,
                            CourseId = "CME320",
                            CourseName = "Computer Architecture"
                        },
                        new
                        {
                            Id = 47,
                            CourseId = "CME422",
                            CourseName = "Senior Project II"
                        },
                        new
                        {
                            Id = 48,
                            CourseId = "CME426",
                            CourseName = "Software Engineering"
                        },
                        new
                        {
                            Id = 49,
                            CourseId = "CME440",
                            CourseName = "Introduction to Bioinformatics"
                        },
                        new
                        {
                            Id = 50,
                            CourseId = "CME442",
                            CourseName = "Special Topics in Computer Engineering II"
                        },
                        new
                        {
                            Id = 51,
                            CourseId = "ESC462",
                            CourseName = "Ethics"
                        },
                        new
                        {
                            Id = 52,
                            CourseId = "CME448",
                            CourseName = "Digital Signal Processing"
                        },
                        new
                        {
                            Id = 53,
                            CourseId = "TRK181",
                            CourseName = "Turkish Language I"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.Matching", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CourseRecordID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentRecordID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Matchings");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                    b.HasDiscriminator().HasValue("AppUserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
